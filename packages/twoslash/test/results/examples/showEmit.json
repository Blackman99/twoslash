{
  "code": "// --importHelpers on: Spread helper will be imported from 'tslib'\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nexport function fn(arr) {\n    var arr2 = __spreadArray([1], __read(arr), false);\n}\n",
  "nodes": [],
  "flags": [
    {
      "type": "handbookOptions",
      "name": "showEmit",
      "value": true,
      "start": 0,
      "end": 13
    },
    {
      "type": "compilerOptions",
      "name": "downlevelIteration",
      "value": true,
      "start": 29,
      "end": 52
    },
    {
      "type": "compilerOptions",
      "name": "target",
      "value": 1,
      "start": 13,
      "end": 29
    }
  ]
}