diff --git a/dist/core.d.mts b/dist/core.d.mts
index 3bdb064d18e80b248270d4e6862ef79c6e98cd79..67385c25d892ad815e2492795bee6b4dc702c406 100644
--- a/dist/core.d.mts
+++ b/dist/core.d.mts
@@ -1,4 +1,4 @@
-import { TwoSlashReturn, twoslasher, TwoSlashOptions } from '@typescript/twoslash';
+import { TwoSlashReturn, twoslasher, TwoSlashOptions, NodeError, NodeTag, NodeQuery, NodeCompletion, NodeHover, TwoSlashExecuteOptions } from 'twoslashes';
 import { CodeToHastOptions, ShikijiTransformerContext, ShikijiTransformer } from 'shikiji-core';
 import { ElementContent, Element, Text } from 'hast';
 
@@ -38,30 +38,25 @@ interface TransformerTwoSlashOptions {
     /**
      * Custom renderers to decide how each info should be rendered
      */
-    renderer?: TwoSlashRenderers;
+    renderer?: TwoSlashRenderer;
     /**
      * Strictly throw when there is an error
      * @default true
      */
     throws?: boolean;
 }
-interface TwoSlashRenderers {
-    lineError?(this: ShikijiTransformerContext, error: TwoSlashReturn['errors'][0]): ElementContent[];
-    lineCustomTag?(this: ShikijiTransformerContext, tag: TwoSlashReturn['tags'][0]): ElementContent[];
-    lineQuery?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], targetNode?: Element | Text): ElementContent[];
-    lineCompletions?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0]): ElementContent[];
-    nodeError?(this: ShikijiTransformerContext, error: TwoSlashReturn['errors'][0], node: Element | Text): Partial<ElementContent>;
-    nodeStaticInfo(this: ShikijiTransformerContext, info: TwoSlashReturn['staticQuickInfos'][0], node: Element | Text): Partial<ElementContent>;
-    nodeQuery?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], node: Element | Text): Partial<ElementContent>;
-    nodeCompletions?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], node: Element | Text): Partial<ElementContent>;
+interface TwoSlashRenderer {
+    lineError?(this: ShikijiTransformerContext, error: NodeError): ElementContent[];
+    lineCustomTag?(this: ShikijiTransformerContext, tag: NodeTag): ElementContent[];
+    lineQuery?(this: ShikijiTransformerContext, query: NodeQuery, targetNode?: Element | Text): ElementContent[];
+    lineCompletions?(this: ShikijiTransformerContext, query: NodeCompletion): ElementContent[];
+    nodeError?(this: ShikijiTransformerContext, error: NodeError, node: Element | Text): Partial<ElementContent>;
+    nodeStaticInfo(this: ShikijiTransformerContext, info: NodeHover, node: Element | Text): Partial<ElementContent>;
+    nodeQuery?(this: ShikijiTransformerContext, query: NodeQuery, node: Element | Text): Partial<ElementContent>;
+    nodeCompletions?(this: ShikijiTransformerContext, query: NodeCompletion, node: Element | Text): Partial<ElementContent>;
 }
 
-/**
- * The default renderer aligning with the original `shiki-twoslash` output.
- */
-declare function rendererClassic(): TwoSlashRenderers;
-
-type CompletionItem = NonNullable<TwoSlashReturn['queries'][0]['completions']>[0];
+type CompletionItem = NonNullable<NodeCompletion['completions']>[number];
 declare const defaultCompletionIcons: Record<CompletionItem['kind'], Element | undefined>;
 declare const defaultCustomTagIcons: Record<string, Element | undefined>;
 
@@ -119,24 +114,24 @@ interface RendererRichOptions {
  * An alternative renderer that providers better prefixed class names,
  * with syntax highlight for the info text.
  */
-declare function rendererRich(options?: RendererRichOptions): TwoSlashRenderers;
+declare function rendererRich(options?: RendererRichOptions): TwoSlashRenderer;
 /**
  * The default hover info processor, which will do some basic cleanup
  */
 declare function defaultHoverInfoProcessor(type: string): string;
 
+/**
+ * The default renderer aligning with the original `shiki-twoslash` output.
+ */
+declare function rendererClassic(): TwoSlashRenderer;
+
 /**
  * This file is the core of the shikiji-twoslash package,
  * Decoupled from twoslash's implementation and allowing to introduce custom implementation or cache system.
  */
 
-declare function defaultTwoSlashOptions(): {
-    customTags: string[];
-    defaultCompilerOptions: {
-        module: number;
-        target: number;
-    };
-};
-declare function createTransformerFactory(defaultTwoslasher: typeof twoslasher): (options?: TransformerTwoSlashOptions) => ShikijiTransformer;
+declare function defaultTwoSlashOptions(): TwoSlashExecuteOptions;
+type TwoSlashFunction = (code: string, lang?: string, options?: TwoSlashExecuteOptions) => TwoSlashReturn;
+declare function createTransformerFactory(defaultTwoslasher: TwoSlashFunction, defaultRenderer?: TwoSlashRenderer): (options?: TransformerTwoSlashOptions) => ShikijiTransformer;
 
-export { type CompletionItem, type RendererRichOptions, type TransformerTwoSlashOptions, type TwoSlashRenderers, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich };
+export { type CompletionItem, type RendererRichOptions, type TransformerTwoSlashOptions, type TwoSlashRenderer, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich };
diff --git a/dist/core.d.ts b/dist/core.d.ts
index 3bdb064d18e80b248270d4e6862ef79c6e98cd79..67385c25d892ad815e2492795bee6b4dc702c406 100644
--- a/dist/core.d.ts
+++ b/dist/core.d.ts
@@ -1,4 +1,4 @@
-import { TwoSlashReturn, twoslasher, TwoSlashOptions } from '@typescript/twoslash';
+import { TwoSlashReturn, twoslasher, TwoSlashOptions, NodeError, NodeTag, NodeQuery, NodeCompletion, NodeHover, TwoSlashExecuteOptions } from 'twoslashes';
 import { CodeToHastOptions, ShikijiTransformerContext, ShikijiTransformer } from 'shikiji-core';
 import { ElementContent, Element, Text } from 'hast';
 
@@ -38,30 +38,25 @@ interface TransformerTwoSlashOptions {
     /**
      * Custom renderers to decide how each info should be rendered
      */
-    renderer?: TwoSlashRenderers;
+    renderer?: TwoSlashRenderer;
     /**
      * Strictly throw when there is an error
      * @default true
      */
     throws?: boolean;
 }
-interface TwoSlashRenderers {
-    lineError?(this: ShikijiTransformerContext, error: TwoSlashReturn['errors'][0]): ElementContent[];
-    lineCustomTag?(this: ShikijiTransformerContext, tag: TwoSlashReturn['tags'][0]): ElementContent[];
-    lineQuery?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], targetNode?: Element | Text): ElementContent[];
-    lineCompletions?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0]): ElementContent[];
-    nodeError?(this: ShikijiTransformerContext, error: TwoSlashReturn['errors'][0], node: Element | Text): Partial<ElementContent>;
-    nodeStaticInfo(this: ShikijiTransformerContext, info: TwoSlashReturn['staticQuickInfos'][0], node: Element | Text): Partial<ElementContent>;
-    nodeQuery?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], node: Element | Text): Partial<ElementContent>;
-    nodeCompletions?(this: ShikijiTransformerContext, query: TwoSlashReturn['queries'][0], node: Element | Text): Partial<ElementContent>;
+interface TwoSlashRenderer {
+    lineError?(this: ShikijiTransformerContext, error: NodeError): ElementContent[];
+    lineCustomTag?(this: ShikijiTransformerContext, tag: NodeTag): ElementContent[];
+    lineQuery?(this: ShikijiTransformerContext, query: NodeQuery, targetNode?: Element | Text): ElementContent[];
+    lineCompletions?(this: ShikijiTransformerContext, query: NodeCompletion): ElementContent[];
+    nodeError?(this: ShikijiTransformerContext, error: NodeError, node: Element | Text): Partial<ElementContent>;
+    nodeStaticInfo(this: ShikijiTransformerContext, info: NodeHover, node: Element | Text): Partial<ElementContent>;
+    nodeQuery?(this: ShikijiTransformerContext, query: NodeQuery, node: Element | Text): Partial<ElementContent>;
+    nodeCompletions?(this: ShikijiTransformerContext, query: NodeCompletion, node: Element | Text): Partial<ElementContent>;
 }
 
-/**
- * The default renderer aligning with the original `shiki-twoslash` output.
- */
-declare function rendererClassic(): TwoSlashRenderers;
-
-type CompletionItem = NonNullable<TwoSlashReturn['queries'][0]['completions']>[0];
+type CompletionItem = NonNullable<NodeCompletion['completions']>[number];
 declare const defaultCompletionIcons: Record<CompletionItem['kind'], Element | undefined>;
 declare const defaultCustomTagIcons: Record<string, Element | undefined>;
 
@@ -119,24 +114,24 @@ interface RendererRichOptions {
  * An alternative renderer that providers better prefixed class names,
  * with syntax highlight for the info text.
  */
-declare function rendererRich(options?: RendererRichOptions): TwoSlashRenderers;
+declare function rendererRich(options?: RendererRichOptions): TwoSlashRenderer;
 /**
  * The default hover info processor, which will do some basic cleanup
  */
 declare function defaultHoverInfoProcessor(type: string): string;
 
+/**
+ * The default renderer aligning with the original `shiki-twoslash` output.
+ */
+declare function rendererClassic(): TwoSlashRenderer;
+
 /**
  * This file is the core of the shikiji-twoslash package,
  * Decoupled from twoslash's implementation and allowing to introduce custom implementation or cache system.
  */
 
-declare function defaultTwoSlashOptions(): {
-    customTags: string[];
-    defaultCompilerOptions: {
-        module: number;
-        target: number;
-    };
-};
-declare function createTransformerFactory(defaultTwoslasher: typeof twoslasher): (options?: TransformerTwoSlashOptions) => ShikijiTransformer;
+declare function defaultTwoSlashOptions(): TwoSlashExecuteOptions;
+type TwoSlashFunction = (code: string, lang?: string, options?: TwoSlashExecuteOptions) => TwoSlashReturn;
+declare function createTransformerFactory(defaultTwoslasher: TwoSlashFunction, defaultRenderer?: TwoSlashRenderer): (options?: TransformerTwoSlashOptions) => ShikijiTransformer;
 
-export { type CompletionItem, type RendererRichOptions, type TransformerTwoSlashOptions, type TwoSlashRenderers, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich };
+export { type CompletionItem, type RendererRichOptions, type TransformerTwoSlashOptions, type TwoSlashRenderer, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich };
diff --git a/dist/core.mjs b/dist/core.mjs
index 9c61890537b37e8ceb6dd7b2da26fc9f901a1b37..b1ff2ce059d882e72b4079e5d57e16d441f38b98 100644
--- a/dist/core.mjs
+++ b/dist/core.mjs
@@ -1,182 +1,5 @@
 import { addClassToHast } from 'shikiji-core';
 
-function rendererClassic() {
-  return {
-    nodeStaticInfo(info, node) {
-      return {
-        type: "element",
-        tagName: "data-lsp",
-        properties: {
-          lsp: info.text
-        },
-        children: [node]
-      };
-    },
-    nodeError(_, node) {
-      return {
-        type: "element",
-        tagName: "data-err",
-        properties: {},
-        children: [node]
-      };
-    },
-    lineError(error) {
-      return [
-        {
-          type: "element",
-          tagName: "div",
-          properties: {
-            class: "error"
-          },
-          children: [
-            {
-              type: "element",
-              tagName: "span",
-              properties: {},
-              children: [
-                {
-                  type: "text",
-                  value: error.renderedMessage
-                }
-              ]
-            },
-            {
-              type: "element",
-              tagName: "span",
-              properties: {
-                class: "code"
-              },
-              children: [
-                {
-                  type: "text",
-                  value: String(error.code)
-                }
-              ]
-            }
-          ]
-        },
-        {
-          type: "element",
-          tagName: "span",
-          properties: {
-            class: "error-behind"
-          },
-          children: [
-            {
-              type: "text",
-              value: error.renderedMessage
-            }
-          ]
-        }
-      ];
-    },
-    lineCompletions(query) {
-      return [
-        {
-          type: "element",
-          tagName: "div",
-          properties: { class: "meta-line" },
-          children: [
-            { type: "text", value: " ".repeat(query.offset) },
-            {
-              type: "element",
-              tagName: "span",
-              properties: { class: "inline-completions" },
-              children: [{
-                type: "element",
-                tagName: "ul",
-                properties: { class: "dropdown" },
-                children: query.completions.filter((i) => i.name.startsWith(query.completionsPrefix || "____")).map((i) => ({
-                  type: "element",
-                  tagName: "li",
-                  properties: {
-                    class: i.kindModifiers?.split(",").includes("deprecated") ? "deprecated" : void 0
-                  },
-                  children: [{
-                    type: "element",
-                    tagName: "span",
-                    properties: {},
-                    children: [
-                      {
-                        type: "element",
-                        tagName: "span",
-                        properties: { class: "result-found" },
-                        children: [
-                          {
-                            type: "text",
-                            value: query.completionsPrefix || ""
-                          }
-                        ]
-                      },
-                      {
-                        type: "text",
-                        value: i.name.slice(query.completionsPrefix?.length || 0)
-                      }
-                    ]
-                  }]
-                }))
-              }]
-            }
-          ]
-        }
-      ];
-    },
-    lineQuery(query, targetNode) {
-      const targetText = targetNode?.type === "text" ? targetNode.value : "";
-      const offset = Math.max(0, (query.offset || 0) + Math.floor(targetText.length / 2) - 1);
-      return [
-        {
-          type: "element",
-          tagName: "div",
-          properties: { class: "meta-line" },
-          children: [
-            { type: "text", value: " ".repeat(offset) },
-            {
-              type: "element",
-              tagName: "span",
-              properties: { class: "popover" },
-              children: [
-                {
-                  type: "element",
-                  tagName: "div",
-                  properties: { class: "arrow" },
-                  children: []
-                },
-                {
-                  type: "text",
-                  value: query.text || ""
-                }
-              ]
-            }
-          ]
-        }
-      ];
-    },
-    lineCustomTag(tag) {
-      return [
-        {
-          type: "element",
-          tagName: "div",
-          properties: { class: `meta-line logger ${tag.name}-log` },
-          children: [
-            {
-              type: "element",
-              tagName: "span",
-              properties: { class: "message" },
-              children: [
-                {
-                  type: "text",
-                  value: tag.annotation || ""
-                }
-              ]
-            }
-          ]
-        }
-      ];
-    }
-  };
-}
-
 const module = {
 	type: "element",
 	tagName: "svg",
@@ -557,7 +380,7 @@ function rendererRich(options = {}) {
     if (!info.text)
       return [];
     const text = processHoverInfo(info.text) ?? info.text;
-    if (!text)
+    if (!text.trim())
       return [];
     const themedContent = codeToHast(text, {
       ...shikijiOptions,
@@ -586,6 +409,8 @@ function rendererRich(options = {}) {
   return {
     nodeStaticInfo(info, node) {
       const themedContent = hightlightPopupContent(this.codeToHast, this.options, info);
+      if (!themedContent.length)
+        return node;
       return {
         type: "element",
         tagName: "span",
@@ -736,7 +561,7 @@ function rendererRich(options = {}) {
           children: [
             {
               type: "text",
-              value: error.renderedMessage
+              value: error.text
             }
           ]
         }
@@ -763,7 +588,7 @@ function rendererRich(options = {}) {
             ] : [],
             {
               type: "text",
-              value: tag.annotation || ""
+              value: tag.text || ""
             }
           ]
         }
@@ -782,16 +607,193 @@ function defaultHoverInfoProcessor(type) {
   return content;
 }
 
+function rendererClassic() {
+  return {
+    nodeStaticInfo(info, node) {
+      return {
+        type: "element",
+        tagName: "data-lsp",
+        properties: {
+          lsp: info.text
+        },
+        children: [node]
+      };
+    },
+    nodeError(_, node) {
+      return {
+        type: "element",
+        tagName: "data-err",
+        properties: {},
+        children: [node]
+      };
+    },
+    lineError(error) {
+      return [
+        {
+          type: "element",
+          tagName: "div",
+          properties: {
+            class: "error"
+          },
+          children: [
+            {
+              type: "element",
+              tagName: "span",
+              properties: {},
+              children: [
+                {
+                  type: "text",
+                  value: error.text
+                }
+              ]
+            },
+            {
+              type: "element",
+              tagName: "span",
+              properties: {
+                class: "code"
+              },
+              children: [
+                {
+                  type: "text",
+                  value: String(error.code)
+                }
+              ]
+            }
+          ]
+        },
+        {
+          type: "element",
+          tagName: "span",
+          properties: {
+            class: "error-behind"
+          },
+          children: [
+            {
+              type: "text",
+              value: error.text
+            }
+          ]
+        }
+      ];
+    },
+    lineCompletions(query) {
+      return [
+        {
+          type: "element",
+          tagName: "div",
+          properties: { class: "meta-line" },
+          children: [
+            { type: "text", value: " ".repeat(query.character) },
+            {
+              type: "element",
+              tagName: "span",
+              properties: { class: "inline-completions" },
+              children: [{
+                type: "element",
+                tagName: "ul",
+                properties: { class: "dropdown" },
+                children: query.completions.filter((i) => i.name.startsWith(query.completionsPrefix || "____")).map((i) => ({
+                  type: "element",
+                  tagName: "li",
+                  properties: {
+                    class: i.kindModifiers?.split(",").includes("deprecated") ? "deprecated" : void 0
+                  },
+                  children: [{
+                    type: "element",
+                    tagName: "span",
+                    properties: {},
+                    children: [
+                      {
+                        type: "element",
+                        tagName: "span",
+                        properties: { class: "result-found" },
+                        children: [
+                          {
+                            type: "text",
+                            value: query.completionsPrefix || ""
+                          }
+                        ]
+                      },
+                      {
+                        type: "text",
+                        value: i.name.slice(query.completionsPrefix?.length || 0)
+                      }
+                    ]
+                  }]
+                }))
+              }]
+            }
+          ]
+        }
+      ];
+    },
+    lineQuery(query, targetNode) {
+      const targetText = targetNode?.type === "text" ? targetNode.value : "";
+      const offset = Math.max(0, (query.character || 0) + Math.floor(targetText.length / 2) - 1);
+      return [
+        {
+          type: "element",
+          tagName: "div",
+          properties: { class: "meta-line" },
+          children: [
+            { type: "text", value: " ".repeat(offset) },
+            {
+              type: "element",
+              tagName: "span",
+              properties: { class: "popover" },
+              children: [
+                {
+                  type: "element",
+                  tagName: "div",
+                  properties: { class: "arrow" },
+                  children: []
+                },
+                {
+                  type: "text",
+                  value: query.text || ""
+                }
+              ]
+            }
+          ]
+        }
+      ];
+    },
+    lineCustomTag(tag) {
+      return [
+        {
+          type: "element",
+          tagName: "div",
+          properties: { class: `meta-line logger ${tag.name}-log` },
+          children: [
+            {
+              type: "element",
+              tagName: "span",
+              properties: { class: "message" },
+              children: [
+                {
+                  type: "text",
+                  value: tag.text || ""
+                }
+              ]
+            }
+          ]
+        }
+      ];
+    }
+  };
+}
+
 function defaultTwoSlashOptions() {
   return {
     customTags: ["annotate", "log", "warn", "error"],
-    defaultCompilerOptions: {
+    compilerOptions: {
       module: 99,
       target: 99
     }
   };
 }
-function createTransformerFactory(defaultTwoslasher) {
+function createTransformerFactory(defaultTwoslasher, defaultRenderer) {
   return function transformerTwoSlash(options = {}) {
     const {
       langs = ["ts", "tsx"],
@@ -803,9 +805,11 @@ function createTransformerFactory(defaultTwoslasher) {
       },
       twoslasher = defaultTwoslasher,
       explicitTrigger = false,
-      renderer = rendererClassic(),
+      renderer = defaultRenderer,
       throws = true
     } = options;
+    if (!renderer)
+      throw new Error("[shikiji-twoslash] Missing renderer");
     const filter = options.filter || ((lang, _, options2) => langs.includes(lang) && (!explicitTrigger || /\btwoslash\b/.test(options2.meta?.__raw || "")));
     return {
       preprocess(code, shikijiOptions) {
@@ -867,8 +871,6 @@ function createTransformerFactory(defaultTwoslasher) {
         };
         const skipTokens = /* @__PURE__ */ new Set();
         for (const error of twoslash.errors) {
-          if (error.line == null || error.character == null)
-            return;
           const token = locateTextToken(error.line, error.character);
           if (!token)
             continue;
@@ -881,31 +883,30 @@ function createTransformerFactory(defaultTwoslasher) {
             insertAfterLine(error.line, renderer.lineError.call(this, error));
         }
         for (const query of twoslash.queries) {
-          if (query.kind === "completions") {
-            const token = locateTextToken(query.line - 1, query.offset);
-            if (!token)
-              continue;
-            skipTokens.add(token);
-            if (renderer.nodeCompletions) {
-              const clone = { ...token };
-              Object.assign(token, renderer.nodeCompletions.call(this, query, clone));
-            }
-            if (renderer.lineCompletions)
-              insertAfterLine(query.line, renderer.lineCompletions.call(this, query));
-          } else if (query.kind === "query") {
-            const token = locateTextToken(query.line - 1, query.offset);
-            if (!token)
-              continue;
-            skipTokens.add(token);
-            if (renderer.nodeQuery) {
-              const clone = { ...token };
-              Object.assign(token, renderer.nodeQuery.call(this, query, clone));
-            }
-            if (renderer.lineQuery)
-              insertAfterLine(query.line, renderer.lineQuery.call(this, query, token));
+          const token = locateTextToken(query.line, query.character);
+          if (!token)
+            continue;
+          skipTokens.add(token);
+          if (renderer.nodeQuery) {
+            const clone = { ...token };
+            Object.assign(token, renderer.nodeQuery.call(this, query, clone));
+          }
+          if (renderer.lineQuery)
+            insertAfterLine(query.line, renderer.lineQuery.call(this, query, token));
+        }
+        for (const completion of twoslash.completions) {
+          const token = locateTextToken(completion.line, completion.character);
+          if (!token)
+            continue;
+          skipTokens.add(token);
+          if (renderer.nodeCompletions) {
+            const clone = { ...token };
+            Object.assign(token, renderer.nodeCompletions.call(this, completion, clone));
           }
+          if (renderer.lineCompletions)
+            insertAfterLine(completion.line, renderer.lineCompletions.call(this, completion));
         }
-        for (const info of twoslash.staticQuickInfos) {
+        for (const info of twoslash.hovers) {
           const token = locateTextToken(info.line, info.character);
           if (!token || token.type !== "text")
             continue;
diff --git a/dist/index.d.mts b/dist/index.d.mts
index 9f506977f3a862fd7284d2ffb4a597c4173ce20e..04c928881123f1d4c3ed22dba706cb679778ab56 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -1,7 +1,7 @@
 import * as shikiji_core from 'shikiji-core';
 import { TransformerTwoSlashOptions } from './core.mjs';
-export { CompletionItem, RendererRichOptions, TwoSlashRenderers, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich } from './core.mjs';
-import '@typescript/twoslash';
+export { CompletionItem, RendererRichOptions, TwoSlashRenderer, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich } from './core.mjs';
+import 'twoslashes';
 import 'hast';
 
 /**
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 3edb7bde0b311d15fd1357fa904d71665d4d49c9..89e4d2600efb5cc41d4c19ec2e1b175f703a4dd7 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1,7 +1,7 @@
 import * as shikiji_core from 'shikiji-core';
 import { TransformerTwoSlashOptions } from './core.js';
-export { CompletionItem, RendererRichOptions, TwoSlashRenderers, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich } from './core.js';
-import '@typescript/twoslash';
+export { CompletionItem, RendererRichOptions, TwoSlashRenderer, createTransformerFactory, defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich } from './core.js';
+import 'twoslashes';
 import 'hast';
 
 /**
diff --git a/dist/index.mjs b/dist/index.mjs
index a81db0b2d9bccc71ff3edab4044b93d4a65aa7d2..082d6b90e9299c5439be8aa3d783c52ca99e62c1 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -1,8 +1,11 @@
-import { twoslasher } from '@typescript/twoslash';
-import { createTransformerFactory } from './core.mjs';
-export { defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererClassic, rendererRich } from './core.mjs';
+import { createTwoSlasher } from 'twoslashes';
+import { createTransformerFactory, rendererClassic } from './core.mjs';
+export { defaultCompletionIcons, defaultCustomTagIcons, defaultHoverInfoProcessor, defaultTwoSlashOptions, rendererRich } from './core.mjs';
 import 'shikiji-core';
 
-const transformerTwoSlash = createTransformerFactory(twoslasher);
+const transformerTwoSlash = /* @__PURE__ */ createTransformerFactory(
+  /* @__PURE__ */ createTwoSlasher(),
+  /* @__PURE__ */ rendererClassic()
+);
 
-export { createTransformerFactory, transformerTwoSlash };
+export { createTransformerFactory, rendererClassic, transformerTwoSlash };